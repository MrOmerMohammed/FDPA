import React, { useState } from 'react';
import ResultDisplay from './ResultDisplay';
import './MediaDetector.css';

const ImageDetector = () => {
  const [file, setFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    
    if (selectedFile) {
      // Check if file is an image
      if (!selectedFile.type.match('image.*')) {
        setError('Please select an image file (JPEG, PNG)');
        setFile(null);
        setPreview(null);
        return;
      }
      
      setError(null);
      setFile(selectedFile);
      
      // Create preview
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreview(reader.result);
      };
      reader.readAsDataURL(selectedFile);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!file) {
      setError('Please select an image file');
      return;
    }
    
    setLoading(true);
    setError(null);
    
    try {
      const formData = new FormData();
      formData.append('file', file);
      
      const response = await fetch('http://localhost:5000/api/detect/image', {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}`);
      }
      
      const data = await response.json();
      setResult(data);
    } catch (err) {
      console.error('Error detecting image:', err);
      setError('Error processing image. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setFile(null);
    setPreview(null);
    setResult(null);
    setError(null);
  };

  return (
    <div className="media-detector">
      <h2>Image Deepfake Detection</h2>
      
      {error && <div className="error-message">{error}</div>}
      
      {!result ? (
        <form onSubmit={handleSubmit}>
          <div className="file-upload-container">
            <label className="file-upload-label">
              {preview ? (
                <img src={preview} alt="Preview" className="file-preview" />
              ) : (
                <div className="upload-placeholder">
                  <i className="fas fa-image"></i>
                  <p>Click to select an image</p>
                </div>
              )}
              <input
                type="file"
                onChange={handleFileChange}
                accept="image/jpeg,image/png"
                className="file-input"
              />
            </label>
          </div>
          
          <div className="button-container">
            <button 
              type="submit" 
              className="submit-button"
              disabled={!file || loading}
            >
              {loading ? 'Analyzing...' : 'Analyze Image'}
            </button>
            
            {file && (
              <button 
                type="button" 
                className="reset-button"
                onClick={resetForm}
              >
                Reset
              </button>
            )}
          </div>
        </form>
      ) : (
        <div className="result-container">
          <ResultDisplay 
            result={result} 
            mediaType="image" 
            mediaSrc={preview}
          />
          <button 
            className="reset-button" 
            onClick={resetForm}
          >
            Analyze Another Image
          </button>
        </div>
      )}
      
      <div className="info-box">
        <h3>About Image Deepfake Detection</h3>
        <p>
          This tool analyzes images to detect if they have been manipulated 
          or generated by AI. Our model looks for inconsistencies in facial features,
          unnatural lighting, and other artifacts that are common in AI-generated images.
        </p>
        <p>
          For best results, use clear images with good lighting. The detector works best
          with portrait-style photos containing faces.
        </p>
      </div>
    </div>
  );
};

export default ImageDetector;